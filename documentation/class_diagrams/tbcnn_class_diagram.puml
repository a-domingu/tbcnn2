@startuml TBCNN-model

' main classes and its main methods



' Layers
class CodingLayer {
    + codingLayer(nodes: List[Node], wR: Tensor, wL: Tensor, b: Tensor): List[Node]
    - codingIterations(): void
}

class ConvolutionalLayer {
    + convolutionalLayer(nodes: List[Node]): List[Node]
    - calculateY(nodes: List[Node]): void
    - slidingWindowTensor(Node): Tensor
}

class MaxPoolingLayer {
    + maxPooling(nodes: List[Node]): void
}

class DynamicPoolingLayer {
    + threeWayPooling(nodes: List[Node], dictSibling: Dictionary[Node]): PoolingVector
}


class PoolingLayer {
    + poolingLayer(nodes: List[Node]): Tensor
}


' First neural network
class Embedding {
    + nodeEmbedding(): Dictionary[Node]
    - randomWalk(Node): List[Node.type]
    - findVectors(Word2Vec): Dictionary[Node]
}


class FirstNeuralNetwork {

    + train(): List[Node], wL: Tensor, wR: Tensor, b: Tensor
    - training_iterations(): Integer
}

class Node {

    + getChildren(): List[ASTNode]
    + descendants(): List[Node]
    - training_iterations(): Integer
}

class SecondNeuralNetwork {
    + train(): void
    + forward(): void
    + validation(): Float
}

class NodeObjectCreator {
    + fileParser(path: String): ASTNode
}

class Main {
    + main(params: List[String]): void
    + secondNeuralNetwork(): Tuple[Set, Set, Float, Float]
}

class MainTester {
    + main(params: List[String]): void
}

class ParameterTesting {

}


' relationships between classes

DynamicPoolingLayer ..> PoolingVector : returns
Embedding ..> WalkMatrix : returns


Main "one" ..> "one" FirstNeuralNetwork : uses
Main "one" ..> "one" SecondNeuralNetwork : uses

ParamTester "one" ..> "one" Main : uses

MainTester "one" ..> "one" FirstNeuralNetwork : uses
MainTester "one" ..> "one" SecondNeuralNetwork : uses

@enduml