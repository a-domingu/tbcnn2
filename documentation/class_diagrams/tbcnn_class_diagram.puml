@startuml TBCNN-model

' main classes and its main methods

class InitializeVectorRepresentation {
    + initialVectorRepresentation(): void
    - vectorRepresentationAllFiles(Dictionary[String]): Dictionary[String]
    - saveVectors(Dictionary[String]): void
}

class PatternTraining {
    + patternTraining(): void
    - trainingAndValidationSetCreation(): Tuple[List[String], List[String], Dictionary[String], Dictionary[String]]
}

class VectorRepresentation {
    + vectorRepresentation(): void
    - readFolderDataSet(): String
}


' Layers
class CodingLayer {
    + codingLayer(nodes: List[Node], wR: Tensor, wL: Tensor, b: Tensor): List[Node]
    - codingIterations(): void
}

class ConvolutionalLayer {
    + convolutionalLayer(nodes: List[Node]): List[Node]
    - calculateY(nodes: List[Node]): void
    - slidingWindowTensor(Node): Tensor
}

class MaxPoolingLayer {
    + maxPooling(nodes: List[Node]): void
}

class DynamicPoolingLayer {
    + threeWayPooling(nodes: List[Node], dictSibling: Dictionary[Node]): PoolingVector
}


class PoolingLayer {
    + poolingLayer(nodes: List[Node]): Tensor
}


' First neural network
class Embedding {
    + nodeEmbedding(): Dictionary[Node]
    - randomWalk(Node): List[Node.type]
    - findVectors(Word2Vec): Dictionary[Node]
}


class FirstNeuralNetwork {

    + train(): Tuple[List[Node], Tensor, Tensor, Tensor]
    - training_iterations(): Integer
}


class Node {

    + getChildren(): List[ASTNode]
    + descendants(): List[Node]
    + setVector(dataFrame): void
    + setChildren(Node): void
}


'Second Neural Network
abstract class SecondNeuralNetwork {
    + train(List[File], List[File], int, float): void
    - forward(List[File]): Tensor
    - {abstract} layers(Tuple[List[Node], Tensor, Tensor, Tensor]): float
    - validation(List[File], int, float): Tuple[float, float]
}

class GeneratorSecondNeuralNetwork extends SecondNeuralNetwork {
    - matricesAndLayersInitialization(): Tuple[Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor]
    - layers(Tuple[List[Node], Tensor, Tensor, Tensor]): float
}

class WrapperSecondNeuralNetwork extends SecondNeuralNetwork {
    - matricesAndLayersInitialization(): Tuple[Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor]
    - layers(Tuple[List[Node], Tensor, Tensor, Tensor]): float
}

class Dataset extends torch.utils.data.Dataset{

}

'Pattern accuracy test
abstract class PatternTest {
    + patternDetection(string): void
    - {abstract} secondNeuralNetwork(Tuple[Tensor, Tensor, Tensor, Tensor]): float
    - predictions(List[String]): Tensor
}

class GeneratorTest extends PatternTest {
    - secondNeuralNetwork(Tuple[Tensor, Tensor, Tensor, Tensor]): float
}

class WrapperTest extends PatternTest {
    - secondNeuralNetwork(Tuple[Tensor, Tensor, Tensor, Tensor]): float
}

'Pattern detection
abstract class PatternDetector {
    + patternDetection(string): void
    - {abstract} secondNeuralNetwork(Tuple[Tensor, Tensor, Tensor, Tensor]): float
    - prediction(Dictionary[String]): Tensor
}

class GeneratorDetector extends PatternDetector {
    - secondNeuralNetwork(Tuple[Tensor, Tensor, Tensor, Tensor]): float
}

class WrapperDetector extends PatternDetector {
    - secondNeuralNetwork(Tuple[Tensor, Tensor, Tensor, Tensor]): float
}
'utils
class NodeObjectCreator {
    + fileParser(path: String): Node
}

class Utils{
    + accuracy(predicts: Tensor, targets: Tensor): Float
    + confMatrix(predicts: Tensor, targets: Tensor): Matrix
}



' relationships between classes

DynamicPoolingLayer ..> PoolingVector : returns
Embedding ..> CSV : returns
VectorRepresentation ..> txt : returns
GeneratorSecondNeuralNetwork ..> CSV : returns
WrapperSecondNeuralNetwork ..> CSV : returns


InitializeVectorRepresentation ..> Embedding: uses

VectorRepresentation ..> FirstNeuralNetwork : uses
VectorRepresentation ..> NodeObjectCreator : uses
NodeObjectCreator ..> Node : uses

PatternTraining ..> Dataset : uses
PatternTraining ..> SecondNeuralNetwork : uses
SecondNeuralNetwork ..> Utils : uses

GeneratorSecondNeuralNetwork ..> ConvolutionalLayer: uses
GeneratorSecondNeuralNetwork ..> PoolingLayer: uses
GeneratorSecondNeuralNetwork ..> HiddenLayer: uses

WrapperSecondNeuralNetwork ..> ConvolutionalLayer: uses
WrapperSecondNeuralNetwork ..> PoolingLayer: uses
WrapperSecondNeuralNetwork ..> HiddenLayer: uses

GeneratorTest ..> ConvolutionalLayer: uses
GeneratorTest ..> PoolingLayer: uses
GeneratorTest ..> HiddenLayer: uses

WrapperTest ..> ConvolutionalLayer: uses
WrapperTest ..> PoolingLayer: uses
WrapperTest ..> HiddenLayer: uses

GeneratorDetector ..> ConvolutionalLayer: uses
GeneratorDetector ..> PoolingLayer: uses
GeneratorDetector ..> HiddenLayer: uses

WrapperDetector ..> ConvolutionalLayer: uses
WrapperDetector ..> PoolingLayer: uses
WrapperDetector ..> HiddenLayer: uses


@enduml