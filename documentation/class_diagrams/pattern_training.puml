@startuml Pattern_training-model

class PatternTraining {
    - pattern: String
    + patternTraining(): void
    - trainingAndValidationSetCreation(): Tuple[List[String], List[String], Dictionary[String], Dictionary[String]]
}


' Layers
class CodingLayer {
    + codingLayer(nodes: List[Node], wR: Tensor, wL: Tensor, b: Tensor): List[Node]
    - codingIterations(): void
}

class ConvolutionalLayer {
    + convolutionalLayer(nodes: List[Node]): List[Node]
    - calculateY(nodes: List[Node]): void
    - slidingWindowTensor(Node): Tensor
}


class PoolingLayer {
    + poolingLayer(nodes: List[Node]): Tensor
}

class HiddenLayer{
    + hiddenLayer(Tensor): Float
}

'Second Neural Network
abstract class SecondNeuralNetwork {
    - VectorSize: Integer
    - FeatureSize: Integer 
    + train(List[File], List[File], int, float): void
    - forward(List[File]): Tensor
    - {abstract} layers(Tuple[List[Node], Tensor, Tensor, Tensor]): float
    - validation(List[File], int, float): Tuple[float, float]
}

class GeneratorSecondNeuralNetwork extends SecondNeuralNetwork {
    - layers: List[Layer]
    - matricesAndLayersInitialization(): Tuple[Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor]
    - layers(Tuple[List[Node], Tensor, Tensor, Tensor]): float
    - save(): void
}

class WrapperSecondNeuralNetwork extends SecondNeuralNetwork {
    - layers: List[Layer]
    - matricesAndLayersInitialization(): Tuple[Tensor, Tensor, Tensor, Tensor, Tensor, Tensor, Tensor]
    - layers(Tuple[List[Node], Tensor, Tensor, Tensor]): float
    - save(): void
}

class Dataset {

}

object Layers {
    List[Layer]
}

object ParamsFolder{
    Matrices: CSV
    VectorBias: CSV
}


class Utils{
    + accuracy(predicts: Tensor, targets: Tensor): Float
    + confMatrix(predicts: Tensor, targets: Tensor): Matrix
}


PatternTraining "one" ..> "one" SecondNeuralNetwork : uses
PatternTraining ..> Dataset : uses
SecondNeuralNetwork "one" .left.> "one" Utils : uses

GeneratorSecondNeuralNetwork "one"..> "one" Layers: contains
WrapperSecondNeuralNetwork "one"..> "one" Layers: contains

Layers ..> CodingLayer: contains
Layers ..> ConvolutionalLayer: contains
Layers ..> PoolingLayer: contains
Layers ..> HiddenLayer: contains

SecondNeuralNetwork "one" ..> "one" ParamsFolder: saves the trained matrices and vectors



@enduml